@page "/monitor"

<PageContainer Title="Monitor">

    <Switch @bind-Checked="isSingleColumn" UnCheckedChildren="双列" CheckedChildren="单列" />

    <GridRow Justify="space-between">
        <GridCol Class="gutter-row" Span="@(isSingleColumn ? 24 : 12)">
            <Card Style="margin: 4px; margin-bottom: 4px">
                <Line Data="data" Config="config" />
            </Card>

        </GridCol>

        @if (!isSingleColumn)
        {
            <GridCol Class="gutter-row" Span="12">
                <Card Style="margin: 4px; margin-bottom: 4px">
                    <Line Data="data" Config="config" />
                </Card>
            </GridCol>
        }
    </GridRow>

    <GridRow Justify="space-between">
        <GridCol Class="gutter-row" Span="@(isSingleColumn ? 24 : 12)">
            <Card Style="margin: 4px; margin-bottom: 4px">
                <Line Data="data" Config="config" />
            </Card>
        </GridCol>

        @if (!isSingleColumn)
        {
            <GridCol Class="gutter-row" Span="12">
                <Card Style="margin: 4px; margin-bottom: 4px">
                    <Line Data="data" Config="config" />
                </Card>
            </GridCol>
        }
    </GridRow>

</PageContainer>

@code
{
    private bool isSingleColumn = false;
    private string dataPath = "data/traffic.db";
    private List<TrafficData.TrafficRecord> allData = new();
    private List<TrafficData.TrafficRecord> pagedData = new();
    private TrafficData trafficData;
    private object[] data;

    LineConfig config = new LineConfig()
    {
        Padding = "auto",
        AutoFit = true,
        XField = "time",
        YField = "value",
        Smooth = false,
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel()
        },
        Legend = new Legend
        {
            Position = "right-top"
        },
        SeriesField = "type"
    };

    protected override void OnInitialized()
    {
        try
        {
            trafficData = new TrafficData(dataPath);
            allData = trafficData.GetTrafficData("future");
            pagedData = new List<TrafficData.TrafficRecord>(allData);
            Console.WriteLine($"Loaded {allData.Count} records.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }

        data = allData.Select(r => new
        {
            time = r.Date.ToString("yyyy-MM-dd HH:mm:ss"),
            value = r.Flow,
            type = "road" + r.Road
        }).ToArray();
    }
}

@* @page "/monitor"

<PageContainer Title="Monitor">

    <Switch @bind-Checked="isSingleColumn" UnCheckedChildren="双列" CheckedChildren="单列" />

    <GridRow Justify="space-between">
        <GridCol Class="gutter-row" Span="@(isSingleColumn ? 24 : 12)">
            <Card Style="margin: 4px; margin-bottom: 4px">
                <Line Data="data" Config="config" />
            </Card>

        </GridCol>

        @if (!isSingleColumn)
        {
            <GridCol Class="gutter-row" Span="12">
                <Card Style="margin: 4px; margin-bottom: 4px">
                    <Line Data="data" Config="config" />
                </Card>
            </GridCol>
        }
    </GridRow>

    <GridRow Justify="space-between">
        <GridCol Class="gutter-row" Span="@(isSingleColumn ? 24 : 12)">
            <Card Style="margin: 4px; margin-bottom: 4px">
                <Line Data="data" Config="config" />
            </Card>
        </GridCol>

        @if (!isSingleColumn)
        {
            <GridCol Class="gutter-row" Span="12">
                <Card Style="margin: 4px; margin-bottom: 4px">
                    <Line Data="data" Config="config" />
                </Card>
            </GridCol>
        }
    </GridRow>

</PageContainer>

@code
{
    private bool isSingleColumn = false;
    object[] data = new object[]
    {
        new { time = "2024-12-01 02:00:00", value = 3, type = "type1"},
        new { time = "2024-12-01 03:00:00", value = 4, type = "type1"},
        new { time = "2024-12-01 04:00:00", value = 3.5, type = "type1"},
        new { time = "2024-12-01 05:00:00", value = 5, type = "type1"},
        new { time = "2024-12-01 06:00:00", value = 4.9, type = "type1"},
        new { time = "2024-12-01 07:00:00", value = 6, type = "type1"},
        new { time = "2024-12-01 08:00:00", value = 7, type = "type1"},
        new { time = "2024-12-01 09:00:00", value = 9, type = "type1"},
        new { time = "2024-12-01 10:00:00", value = 13, type = "type1"},

        new { time = "2024-12-01 02:00:00", value = 1.1, type = "type2"},
        new { time = "2024-12-01 03:00:00", value = 2.4, type = "type2"},
        new { time = "2024-12-01 04:00:00", value = 5, type = "type2" },
        new { time = "2024-12-01 05:00:00", value = 3.5, type = "type2" },
        new { time = "2024-12-01 06:00:00", value = 4.9, type = "type2" },
        new { time = "2024-12-01 07:00:00", value = 6, type = "type2" },
        new { time = "2024-12-01 08:00:00", value = 2, type = "type2" },
        new { time = "2024-12-01 09:00:00", value = 3, type = "type2" },
        new { time = "2024-12-01 10:00:00", value = 1, type = "type2" },
    };

    LineConfig config = new LineConfig()
    {
        Padding = "auto",
        AutoFit = true,
        XField = "time",
        YField = "value",
        Smooth = false,
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel()
        },
        Legend = new Legend
        {
            Position = "right-top"
        },
        SeriesField = "type"
    };
} *@
