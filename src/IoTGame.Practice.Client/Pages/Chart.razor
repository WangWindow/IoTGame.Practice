@page "/chart"

<PageContainer Title="Chart">

    <Switch @bind-Checked="isSingleColumn" UnCheckedChildren="双列" CheckedChildren="单列" />

    <GridRow Justify="space-between">
        <GridCol Class="gutter-row" Span="@(isSingleColumn ? 24 : 12)">
            <Card Style="margin: 4px; margin-bottom: 4px">
                <Line Data="historyData" Config="config" />
            </Card>

        </GridCol>

        @if (!isSingleColumn)
        {
            <GridCol Class="gutter-row" Span="12">
                <Card Style="margin: 4px; margin-bottom: 4px">
                    <Line Data="historyData" Config="config" />
                </Card>
            </GridCol>
        }
    </GridRow>

    <GridRow Justify="space-between">
        <GridCol Class="gutter-row" Span="@(isSingleColumn ? 24 : 12)">
            <Card Style="margin: 4px; margin-bottom: 4px">
                <Line Data="futureData" Config="config" />
            </Card>
        </GridCol>

        @if (!isSingleColumn)
        {
            <GridCol Class="gutter-row" Span="12">
                <Card Style="margin: 4px; margin-bottom: 4px">
                    <Line Data="futureData" Config="config" />
                </Card>
            </GridCol>
        }
    </GridRow>

</PageContainer>

@code
{
    private bool isSingleColumn = false;
    private string dataPath = "data/traffic.db";
    private List<TrafficData.TrafficRecord> allHistoryData = new();
    private List<TrafficData.TrafficRecord> pagedHistoryData = new();
    private List<TrafficData.TrafficRecord> allFutureData = new();
    private List<TrafficData.TrafficRecord> pagedFutureData = new();
    private TrafficData trafficData;
    private object[] historyData;
    private object[] futureData;

    LineConfig config = new LineConfig()
    {
        Padding = "auto",
        AutoFit = true,
        XField = "time",
        YField = "value",
        Smooth = false,
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel()
        },
        Legend = new Legend
        {
            Position = "right-top"
        },
        SeriesField = "type"
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            trafficData = new TrafficData(dataPath);
            allHistoryData = await trafficData.GetTrafficDataAsync("history");
            pagedHistoryData = new List<TrafficData.TrafficRecord>(allHistoryData);
            Console.WriteLine($"Loaded {allHistoryData.Count} records.");

            allFutureData = await trafficData.GetTrafficDataAsync("future");
            pagedFutureData = new List<TrafficData.TrafficRecord>(allFutureData);
            Console.WriteLine($"Loaded {allFutureData.Count} records.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }

        historyData = allHistoryData.Select(r => new
        {
            time = r.Date.ToString("yyyy-MM-dd HH:mm:ss"),
            value = r.Flow,
            type = "road" + r.Road
        }).ToArray();

        futureData = allFutureData.Select(r => new
        {
            time = r.Date.ToString("yyyy-MM-dd HH:mm:ss"),
            value = r.Flow,
            type = "road" + r.Road
        }).ToArray();
    }
}
